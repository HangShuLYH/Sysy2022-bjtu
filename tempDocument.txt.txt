void IrVisitor::visit(ConstInitVal *constInitVal) {
    if (constInitVal->constExp) {
        constInitVal->constExp->accept(*this);
    } else {
        static int dims(0), index(0);
        dims++;
        static ConstValue *var = nullptr;
        static bool flag = true;
        if (flag) {
            var = dynamic_cast<ConstValue *>(tempVal.getVal());
            var->setArray(true);
            flag = false;
        }
        size_t init_len(0); // 该维度已有长度
        size_t num_cnt(0);

        size_t dim_len(1);
        for (int i(dims); i < var->getArrayDims().size(); i++) {
            dim_len *= var->getArrayDims()[i];
        }

        for (size_t i = 0; i < constInitVal->constInitValList.size(); ++i) {
            Value* t = new VarValue("", var->getType(), false, isGlobal() ? cnt++ : cur_func->varCnt++, true);
            if (!constInitVal->constInitValList[i]->constInitValList.empty()) {
                size_t left_len(num_cnt % dim_len == 0 ? 0 : dim_len - num_cnt % dim_len);
                for (; left_len > 0; left_len--) {
                    if (var->getType()->isIntPointer()) {
                        var->push(0);
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, 0, new Type(TypeID::INT, typeInt)));
                    } else {
                        var->push((float) 0.0);
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, (float)0.0, new Type(TypeID::FLOAT, typeFloat)));
                    }
                }
                init_len += ceil((double) num_cnt / (double) dim_len) + 1;
                num_cnt = 0;
            }

            constInitVal->constInitValList[i]->accept(*this);
            if (!tempVal.getVal() && constInitVal->constInitValList[i]->constInitValList.empty()) {
                num_cnt++;
                if (var->getType()->isIntPointer()) {
                    if (tempVal.isInt()) {
                        var->push(tempVal.getInt());
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, tempVal.getInt(), new Type(TypeID::INT, typeInt)));
                    } else {
                        var->push((int) tempVal.getFloat());
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, tempVal.getFloat(), new Type(TypeID::FLOAT, typeFloat)));
                    }
                } else {
                    if (tempVal.isInt()) {
                        var->push((float) tempVal.getInt());
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, tempVal.getInt(), new Type(TypeID::INT, typeInt)));
                    } else {
                        var->push(tempVal.getFloat());
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, tempVal.getFloat(), new Type(TypeID::FLOAT, typeFloat)));
                    }
                }
            } else if (tempVal.getVal() && constInitVal->constInitValList[i]->constInitValList.empty()) {
                num_cnt++;
                VarValue *temp = nullptr;
                if (var->getType()->isInt() && tempVal.getVal()->getType()->isFloat()
                            || var->getType()->isFloat() && tempVal.getVal()->getType()->isInt()) {
                    temp = new VarValue("", var->getType(), isGlobal(), cur_func ? cur_func->varCnt++ : 0);
                    cur_bb->pushIr(CastIRManager::getIR(temp, tempVal));
                    tempVal.setVal(temp);
                } else temp = dynamic_cast<VarValue *>(tempVal.getVal());
                if (var->getType()->isInt()) {
                    var->push(0);
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, tempVal));
                    // cur_bb->pushIr(StoreIRManager::getIR(t, 0, new Type(TypeID::INT, typeInt)));
                } else {
                    var->push((float) 0.0);
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, tempVal));
                    // cur_bb->pushIr(StoreIRManager::getIR(t, (float)0.0, new Type(TypeID::FLOAT, typeFloat)));
                }
            }
        }

        if (!flag && var->getArrayDims()[dims - 1] - init_len) {
            size_t left_len(num_cnt % dim_len == 0 ? 0 : dim_len - num_cnt % dim_len);
            for (; left_len > 0; left_len--) {
                Value* t = new VarValue("", var->getType(), false, isGlobal() ? cnt++ : cur_func->varCnt++, true);
                if (var->getType()->isInt()) {
                    var->push(0);
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, 0, new Type(TypeID::INT, typeInt)));
                } else {
                    var->push((float) 0.0);
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, (float)0.0, new Type(TypeID::FLOAT, typeFloat)));
                }
            }

            init_len += ceil((double) num_cnt / (double) dim_len);
            num_cnt = 0;

            for (size_t left_len(dim_len * (var->getArrayDims()[dims - 1] - init_len)); left_len > 0; left_len--) {
                Value* t = new VarValue("", var->getType(), false, isGlobal() ? cnt++ : cur_func->varCnt++, true);
                if (var->getType()->isInt()) {
                    var->push(0);
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, 0, new Type(TypeID::INT, typeInt)));
                } else {
                    var->push(0);
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, (float)0.0, new Type(TypeID::FLOAT, typeFloat)));
                }
            }
        }

        dims--;

        if (dims == 0) {
            tempVal.setVal(var);
            var = nullptr;
            index = 0;
            flag = true;
        }
    }
}


/*================分界线=================*/

void IrVisitor::visit(InitVal *initVal) {
    if (initVal->exp) {
        initVal->exp->accept(*this);
    } else {
        static int dims(0), index(0);
        dims++;
        static VarValue *var = nullptr;
        static bool flag = true;
        if (flag) {
            var = dynamic_cast<VarValue *>(tempVal.getVal());
            var->setArray(true);
            flag = false;
        }
        size_t init_len(0); // 该维度已有长度
        size_t num_cnt(0);

        size_t dim_len(1);
        for (int i(dims); i < var->getArrayDims().size(); i++) {
            dim_len *= var->getArrayDims()[i];
        }

        for (size_t i = 0; i < initVal->initValList.size(); ++i) {
                Value* t = new VarValue("", var->getType(), false, isGlobal() ? cnt++ : cur_func->varCnt++, true);
            if (!initVal->initValList[i]->initValList.empty()) {
                size_t left_len(num_cnt % dim_len == 0 ? 0 : dim_len - num_cnt % dim_len);
                for (; left_len > 0; left_len--) {
                    if (var->getType()->isIntPointer()) {
                        var->push();
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, 0, new Type(TypeID::INT, typeInt)));
                    } else {
                        var->push();
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, (float)0.0, new Type(TypeID::FLOAT, typeFloat)));
                    }
                }
                init_len += ceil((double) num_cnt / (double) dim_len) + 1;
                num_cnt = 0;
            }

            initVal->initValList[i]->accept(*this);
            if (!tempVal.getVal() && initVal->initValList[i]->initValList.empty()) {
                num_cnt++;
                if (var->getType()->isIntPointer()) {
                    if (tempVal.isInt()) {
                        var->push();
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, tempVal.getInt(), new Type(TypeID::INT, typeInt)));
                    } else {
                        var->push();
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, tempVal.getFloat(), new Type(TypeID::FLOAT, typeFloat)));
                    }
                } else {
                    if (tempVal.isInt()) {
                        var->push();
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, tempVal.getInt(), new Type(TypeID::INT, typeInt)));
                    } else {
                        var->push();
                        cur_bb->pushIr(new GEPIR(t,var,index++));
                        cur_bb->pushIr(StoreIRManager::getIR(t, tempVal.getFloat(), new Type(TypeID::FLOAT, typeFloat)));
                    }
                }
            } else if (tempVal.getVal() && initVal->initValList[i]->initValList.empty()) {
                num_cnt++;
                if ((var->getType()->isIntPointer() && (tempVal.getVal()->getType()->isFloat() || tempVal.getVal()->getType()->isFloatPointer()))
                        || (var->getType()->isFloatPointer() && (tempVal.getVal()->getType()->isInt() || tempVal.getVal()->getType()->isIntPointer()))) {
                    VarValue* temp = new VarValue("", var->getType(), isGlobal(), cur_func ? cur_func->varCnt++ : 0);
                    cur_bb->pushIr(CastIRManager::getIR(temp, tempVal));
                    tempVal.setVal(temp);
                }
                var->push();
                cur_bb->pushIr(new GEPIR(t,var,index++));
                cur_bb->pushIr(StoreIRManager::getIR(t, tempVal));
            }
        }

        if (!flag && var->getArrayDims()[dims - 1] - init_len) {
            size_t left_len(num_cnt % dim_len == 0 ? 0 : dim_len - num_cnt % dim_len);
            for (; left_len > 0; left_len--) {
                Value* t = new VarValue("", var->getType(), false, isGlobal() ? cnt++ : cur_func->varCnt++, true);
                if (var->getType()->isIntPointer()) {
                    var->push();
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, 0, new Type(TypeID::INT, typeInt)));
                } else {
                    var->push();
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, (float)0.0, new Type(TypeID::FLOAT, typeFloat)));
                }
            }

            init_len += ceil((double) num_cnt / (double) dim_len);
            num_cnt = 0;

            for (size_t left_len(dim_len * (var->getArrayDims()[dims - 1] - init_len)); left_len > 0; left_len--) {
                Value* t = new VarValue("", var->getType(), false, isGlobal() ? cnt++ : cur_func->varCnt++, true);
                if (var->getType()->isIntPointer()) {
                    var->push();
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, 0, new Type(TypeID::INT, typeInt)));
                } else {
                    var->push();
                    cur_bb->pushIr(new GEPIR(t,var,index++));
                    cur_bb->pushIr(StoreIRManager::getIR(t, (float)0.0, new Type(TypeID::FLOAT, typeFloat)));
                }
            }
        }

        dims--;

        if (dims == 0) {
            tempVal.setVal(var);
            var = nullptr;
            index = 0;
            flag = true;
        }
    }
}